type: edu
custom_name: stage2
files:
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.function.Function;

    class Attach {
        Function<String, CheckResult> func;

        Attach(Function<String, CheckResult> func) {
            this.func = func;
        }
    }

    public class MusicAdvisorTest extends StageTest<Attach> {

        @Override
        public List<TestCase<Attach>> generate() {
            return List.of(
                new TestCase<Attach>()
                    .setInput("auth\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---SUCCESS---")) {
                            return new CheckResult(false,
                                "There is no \"---SUCCESS---\" after \"auth\" but should be");
                        }
                        if (!reply.contains("https://accounts.spotify.com/authorize?")) {
                            return new CheckResult(false,
                                "There is no link after \"auth\" but should be");
                        }
                        if (reply.contains("a19ee7dbfda443b2a8150c9101bfd645")) {
                            return new CheckResult(false,
                                    "You shouldn't use the client_id from the example!! " +
                                            "You should create your own id on the spotify site.");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("new\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("featured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("auth\nnew\nfeatured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---NEW RELEASES---")) {
                            return new CheckResult(false,
                                "When \"new\" was inputted there should be \"---NEW RELEASES---\" line");
                        }
                        if (!reply.contains("---FEATURED---")) {
                            return new CheckResult(false,
                                "When \"featured\" was inputted there should be \"---FEATURED---\" line");
                        }
                        return CheckResult.correct();
                    }))

            );
        }

        @Override
        public CheckResult check(String reply, Attach clue) {
            return clue.func.apply(reply);
        }
    }
  learner_created: false
- name: src/advisor/Advisor.java
  visible: true
  text: "package advisor;\n\nimport java.util.Locale;\n\npublic class Advisor {\n\n\
    \    public void printNew() {\n        System.out.println(\"---NEW RELEASES---\\\
    n\" +\n                \"Mountains [Sia, Diplo, Labrinth]\\n\" +\n           \
    \     \"Runaway [Lil Peep]\\n\" +\n                \"The Greatest Show [Panic!\
    \ At The Disco]\\n\" +\n                \"All Out Life [Slipknot]\");\n    }\n\
    \    public void printFeatured() {\n        System.out.println(\"---FEATURED---\\\
    n\" +\n                \"Mellow Morning\\n\" +\n                \"Wake Up and\
    \ Smell the Coffee\\n\" +\n                \"Monday Motivation\\n\" +\n      \
    \          \"Songs to Sing in the Shower\");\n    }\n    public void printCategories()\
    \ {\n        System.out.println(\"---CATEGORIES---\\n\" +\n                \"\
    Top Lists\\n\" +\n                \"Pop\\n\" +\n                \"Mood\\n\" +\n\
    \                \"Latin\");\n    }\n    public void printPlaylists(String category)\
    \ {\n        System.out.printf(\"---%s PLAYLISTS---\\n\" +\n                \"\
    Walk Like A Badass  \\n\" +\n                \"Rage Beats  \\n\" +\n         \
    \       \"Arab Mood Booster  \\n\" +\n                \"Sunday Stroll\\n\", category.toUpperCase(Locale.ROOT));\n\
    \    }\n    public void printExit() {\n        System.out.println(\"---GOODBYE!---\"\
    );\n    }\n    \n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5478#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 22 Mar 2022 14:04:09 UTC
record: 2
